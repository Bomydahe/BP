Okay, this is my component :

import React, { useState, useEffect, useCallback } from "react";
import {
  View,
  StyleSheet,
  TouchableOpacity,
  Modal,
  TextInput,
  Text,
  Alert,
  Image,
  Dimensions,
} from "react-native";
import { Video } from "expo-av";
import * as ScreenOrientation from "expo-screen-orientation";
import { useNavigation, useFocusEffect } from "@react-navigation/native";
import { MaterialIcons, FontAwesome } from "@expo/vector-icons";
import { firebase } from "../firebaseConfig";
import { showMessage } from "react-native-flash-message";
import { captureRef } from "react-native-view-shot";

export default function TrainerVideoPlayer({ route }) {
  const { videoUri } = route.params;
  const navigation = useNavigation();
  const videoName = route.params.videoName;
  const [modalVisible, setModalVisible] = useState(false);
  const [inputValue, setInputValue] = useState("");
  const [playbackStatus, setPlaybackStatus] = useState({});
  const videoPlayerRef = React.useRef(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const screenWidth = Dimensions.get("window").width;
  const screenHeight = Dimensions.get("window").height;

  const handleAddComment = useCallback(async () => {
    const currentStatus = await videoPlayerRef.current.getStatusAsync();

    if (currentStatus.isPlaying) {
      Alert.alert("Please pause the video where you want to add a comment.");
      return;
    }

    setModalVisible(true);
  }, [videoName, inputValue]);

  const handleEdit = useCallback(async () => {
    const currentStatus = await videoPlayerRef.current.getStatusAsync();

    if (currentStatus.isPlaying) {
      Alert.alert("Please pause the video where you want to edit it.");
      return;
    }

    const snapshot = await captureRef(videoPlayerRef, {
      format: "jpg",
      quality: 1.0,
    });

    Image.getSize(snapshot, async (width, height) => {
      const currentTime = await videoPlayerRef.current.getStatusAsync();
      const position = currentTime.positionMillis;

      console.log("+++++++++++", screenWidth, screenHeight);

      navigation.navigate("VideoEditScreen", {
        videoName,
        position,
        snapshotUri: snapshot,
        snapshotWidth: screenWidth,
        snapshotHeight: screenHeight,
      });
    });
  }, [navigation]);

  async function addComment(videoName, commentText, time) {
    try {
      const firestore = firebase.firestore();
      const videoRef = firestore.collection("videos").doc(videoName);

      // Get the current comments array from the video document
      const videoDoc = await videoRef.get();
      const comments = videoDoc.data().comments || [];

      // Create a new comment object with the provided text and time
      const newComment = { text: commentText, time: time };

      // Add the new comment to the existing comments array
      comments.push(newComment);

      // Update the comments field in the video document with the new comments array
      await videoRef.update({ comments: comments });

      console.log(`Comment added to video ${videoName}:`, newComment);
      showMessage({
        message: "Message uploaded successfully",
        type: "success",
        duration: 3000,
        position: "top",
      });
    } catch (error) {
      console.error("Error adding comment:", error);
    }
  }

  useFocusEffect(
    React.useCallback(() => {
      navigation.setOptions({
        headerRight: () => (
          <View style={styles.headerRightContainer}>
            <TouchableOpacity
              onPress={handleAddComment}
              style={styles.headerRightButton}
            >
              <MaterialIcons name="message" size={24} color="white" />
            </TouchableOpacity>
            <TouchableOpacity
              onPress={handleEdit}
              style={styles.headerRightButton}
            >
              <FontAwesome name="pencil" size={24} color="white" />
            </TouchableOpacity>
          </View>
        ),
      });
    }, [navigation, route.params.categoryName, handleAddComment])
  );

  useEffect(() => {
    const lockOrientation = async () => {
      await ScreenOrientation.unlockAsync();
    };

    lockOrientation();

    return () => {
      const resetOrientation = async () => {
        await ScreenOrientation.lockAsync(
          ScreenOrientation.OrientationLock.PORTRAIT
        );
      };

      resetOrientation();
    };
  }, []);

  return (
    <View style={styles.container}>
      <Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        onRequestClose={() => {
          setModalVisible(false);
        }}
      >
        <View style={styles.centeredView}>
          <View style={styles.modalView}>
            <Text style={styles.modalText}>Add a comment:</Text>
            <TextInput
              style={styles.input}
              onChangeText={(text) => setInputValue(text)}
              value={inputValue}
              placeholder="Write your comment"
              multiline
              numberOfLines={8}
            />
            <View style={styles.buttonContainer}>
              <TouchableOpacity
                style={[styles.button, { flex: 1, marginRight: 10 }]}
                onPress={async () => {
                  const currentTime =
                    await videoPlayerRef.current.getStatusAsync();
                  const position = currentTime.positionMillis;
                  addComment(videoName, inputValue, position);
                  setModalVisible(false);
                  setInputValue(""); // Reset the input value
                }}
              >
                <Text style={styles.buttonText}>Submit</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.button, { flex: 1, marginLeft: 10 }]}
                onPress={() => {
                  setModalVisible(false);
                  setInputValue(""); // Reset the input value
                }}
              >
                <Text style={styles.buttonText}>Cancel</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
      <Video
        ref={videoPlayerRef}
        source={{ uri: videoUri }}
        rate={1.0}
        volume={1.0}
        isMuted={false}
        resizeMode="contain"
        shouldPlay
        isLooping
        useNativeControls
        style={styles.video}
        onPlaybackStatusUpdate={(status) => {
          if (status.didJustFinish && !status.isLooping) {
            videoPlayerRef.current.pauseAsync();
          }
        }}
      />
    </View>
  );
}

now when i create message and video is stopped, on submit i want also to upload snapshot of this moment along with other message data like text and time, and store there url of this snapshot from firebase storage right after uploading it. Something like this: async function uploadThumbnail(localThumbnailUrl) {
    const response = await fetch(localThumbnailUrl);
    const blob = await response.blob();
    const thumbnailName =
      "thumbnails/" +
      localThumbnailUrl.substring(localThumbnailUrl.lastIndexOf("/") + 1);
    const storageRef = firebase.storage().ref().child(thumbnailName);

    await storageRef.put(blob);

    const downloadUrl = await storageRef.getDownloadURL();
    return downloadUrl;
  }

  /* metadata to save/upload along with videos */
  async function saveVideoMetadata(
    videoName,
    videoUrl,
    thumbnailUrl,
    booleanVar,
    userId
  ) {
    const videoRef = firebase.firestore().collection("videos").doc(videoName);
    await videoRef.set({
      id: generateUniqueId(),
      url: videoUrl,
      videoName: videoName,
      thumbnail: thumbnailUrl,
      booleanVar: booleanVar,
      userId: userId,
    });
  }

  /* upload video to firebase */
  async function uploadVideo(videoUrl) {
    console.log("Uploading video with URL:", videoUrl);
    const localThumbnailUrl = await generateThumbnail(videoUrl);

    // Upload the thumbnail to Firebase Storage and get its download URL
    const thumbnailUrl = await uploadThumbnail(localThumbnailUrl);

    const response = await fetch(videoUrl);
    const blob = await response.blob();
    const videoName = videoUrl.substring(videoUrl.lastIndexOf("/") + 1);
    const storageRef = firebase.storage().ref().child(videoName).put(blob);

    try {
      await storageRef;
      console.log("Video uploaded successfully");

      // Get the user ID from Firebase Authentication
      const userId = firebase.auth().currentUser.uid;

      // Save video metadata to Firestore with an initial boolean value (e.g., true)
      await saveVideoMetadata(videoName, videoUrl, thumbnailUrl, false, userId);
    } catch (error) {
      console.error("Error uploading video:", error);
    }
  }

Do you understand what i want?