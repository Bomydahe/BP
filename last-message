okay now i have this problem: in right corner of navigation of my video player there is message icon, even tho it shoudnt be there and i didnt implement it there. Now this is my code: import React, { useEffect } from "react";
import { View, StyleSheet, TouchableOpacity } from "react-native";
import { Video } from "expo-av";
import * as ScreenOrientation from "expo-screen-orientation";

export default function SharedVideoPlayer({ route }) {
  const { videoUri } = route.params;

  useEffect(() => {
    const lockOrientation = async () => {
      await ScreenOrientation.unlockAsync();
    };

    lockOrientation();

    return () => {
      const resetOrientation = async () => {
        await ScreenOrientation.lockAsync(
          ScreenOrientation.OrientationLock.PORTRAIT
        );
      };

      resetOrientation();
    };
  }, []);

  return (
    <View style={styles.container}>
      <Video
        source={{ uri: videoUri }}
        rate={1.0}
        volume={1.0}
        isMuted={false}
        resizeMode="contain"
        shouldPlay
        isLooping
        useNativeControls
        style={styles.video}
      />
    </View>
  );
}


this is my navigation component code: import React from "react";
import { StyleSheet, StatusBar, View } from "react-native";
import { NavigationContainer } from "@react-navigation/native";
import { createMaterialTopTabNavigator } from "@react-navigation/material-top-tabs";
import MyVideos from "./components/MyVideos";
import ComparedVideos from "./components/ComparedVideos";
import SharedVideos from "./components/SharedVideos";
import Compare from "./components/Compare";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import { MenuProvider } from "react-native-popup-menu";
import CategoryScreen from "./components/CategoryScreen";
import VideoPlayerScreen from "./components/VideoPlayerScreen";
import ComparedVideoPlayer from "./components/ComparedVideoPlayer";
import LoginScreen from "./components/LoginScreen";
import TrainerHomeScreen from "./components/TrainerHomeScreen";
import ClientsSharedScreen from "./components/ClientsSharedScreen";
import SharedCategory from "./components/SharedCategory";
import TrainerVideoPlayer from "./components/TrainerVideoPlayer";
import SharedVideoPlayer from "./components/SharedVideoPlayer";

const Stack = createNativeStackNavigator();
const Tab = createMaterialTopTabNavigator();

const CompareScreen = ({ navigation, route }) => {
  return (
    <View style={styles.container}>
      <Compare route={route} />
    </View>
  );
};

function Home() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="My videos" component={MyVideos} />
      <Tab.Screen name="Compared" component={ComparedVideos} />
      <Tab.Screen name="Shared" component={SharedVideos} />
    </Tab.Navigator>
  );
}

export default function App() {
  return (
    <MenuProvider>
      <NavigationContainer>
        <Stack.Navigator>
          <Stack.Screen
            name="LoginScreen"
            component={LoginScreen}
            options={{ headerShown: false }}
          />

          <Stack.Screen
            name="Home"
            component={Home}
            options={{ headerShown: false }}
          />
          <Stack.Screen name="Category" component={CategoryScreen} />
          <Stack.Screen name="Compare" component={CompareScreen} />
          <Stack.Screen
            name="VideoPlayer"
            component={VideoPlayerScreen}
            options={{
              title: "Video Player",
              headerStyle: {
                backgroundColor: "black",
              },
              headerTintColor: "white",
            }}
          />
          <Stack.Screen
            name="ComparedVideoPlayer"
            component={ComparedVideoPlayer}
            options={{
              title: "Video Player",
              headerStyle: {
                backgroundColor: "black",
              },
              headerTintColor: "white",
            }}
          />
          <Stack.Screen
            name="TrainerHomeScreen"
            component={TrainerHomeScreen}
          />
          <Stack.Screen
            name="ClientsSharedScreen"
            component={ClientsSharedScreen}
          />
          <Stack.Screen name="SharedCategory" component={SharedCategory} />
          <Stack.Screen
            name="TrainerVideoPlayer"
            component={TrainerVideoPlayer}
            options={{
              title: "Video Player",
              headerStyle: {
                backgroundColor: "black",
              },
              headerTintColor: "white",
            }}
          />
          <Stack.Screen
            name="SharedVideoPlayer"
            component={TrainerVideoPlayer}
            options={{
              title: "Video Player",
              headerStyle: {
                backgroundColor: "black",
              },
              headerTintColor: "white",
            }}
          />
        </Stack.Navigator>
        <StatusBar />
      </NavigationContainer>
    </MenuProvider>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },

  text: {
    fontSize: 20,
  },

  menuOptionText: {
    fontSize: 16,
    paddingHorizontal: 15,
    paddingVertical: 10,
  },
});


and this is code of component where i implemented this icon: import React, { useState, useEffect, useCallback } from "react";
import {
  View,
  StyleSheet,
  TouchableOpacity,
  Modal,
  TextInput,
  Text,
} from "react-native";
import { Video } from "expo-av";
import * as ScreenOrientation from "expo-screen-orientation";
import { useNavigation, useFocusEffect } from "@react-navigation/native";
import { MaterialIcons } from "@expo/vector-icons";
import { firebase } from "../firebaseConfig";

export default function TrainerVideoPlayer({ route }) {
  const { videoUri } = route.params;
  const navigation = useNavigation();
  const videoName = route.params.videoName;
  const [modalVisible, setModalVisible] = useState(false);
  const [inputValue, setInputValue] = useState("");
  const videoPlayerRef = React.useRef(null);

  const handleAddComment = useCallback(async () => {
    setModalVisible(true);
  }, [videoName, inputValue]);

  async function addComment(videoName, commentText, time) {
    try {
      const firestore = firebase.firestore();
      const videoRef = firestore.collection("videos").doc(videoName);

      // Get the current comments array from the video document
      const videoDoc = await videoRef.get();
      const comments = videoDoc.data().comments || [];

      // Create a new comment object with the provided text and time
      const newComment = { text: commentText, time: time };

      // Add the new comment to the existing comments array
      comments.push(newComment);

      // Update the comments field in the video document with the new comments array
      await videoRef.update({ comments: comments });

      console.log(`Comment added to video ${videoName}:`, newComment);
    } catch (error) {
      console.error("Error adding comment:", error);
    }
  }

  useFocusEffect(
    React.useCallback(() => {
      navigation.setOptions({
        headerRight: () => (
          <TouchableOpacity
            onPress={handleAddComment}
            style={{ marginRight: 10 }}
          >
            <MaterialIcons name="message" size={24} color="white" />
          </TouchableOpacity>
        ),
      });
    }, [navigation, route.params.categoryName, handleAddComment])
  );

  useEffect(() => {
    const lockOrientation = async () => {
      await ScreenOrientation.unlockAsync();
    };

    lockOrientation();

    return () => {
      const resetOrientation = async () => {
        await ScreenOrientation.lockAsync(
          ScreenOrientation.OrientationLock.PORTRAIT
        );
      };

      resetOrientation();
    };
  }, []);

  return (
    <View style={styles.container}>
      <Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        onRequestClose={() => {
          setModalVisible(false);
        }}
      >
        <View style={styles.centeredView}>
          <View style={styles.modalView}>
            <Text style={styles.modalText}>Add a comment:</Text>
            <TextInput
              style={styles.input}
              onChangeText={(text) => setInputValue(text)}
              value={inputValue}
              placeholder="Write your comment"
            />
            <TouchableOpacity
              style={styles.button}
              onPress={async () => {
                const currentTime =
                  await videoPlayerRef.current.getStatusAsync();
                const position = currentTime.positionMillis;
                addComment(videoName, inputValue, position);
                setModalVisible(false);
              }}
            >
              <Text style={styles.buttonText}>Submit</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.button}
              onPress={() => setModalVisible(false)}
            >
              <Text style={styles.buttonText}>Cancel</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
      <Video
        ref={videoPlayerRef}
        source={{ uri: videoUri }}
        rate={1.0}
        volume={1.0}
        isMuted={false}
        resizeMode="contain"
        shouldPlay
        isLooping
        useNativeControls
        style={styles.video}
      />
    </View>
  );
}

any idea why it would render this message icon in component where i didnt even implement it?